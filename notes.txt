D3.js (Data Driven Documents) = JavaScript library for creating dynamic and interactive data visualizations in the browser - focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page.

D3 is built to work with common web standards â€“ namely HTML, CSS, and Scalable Vector Graphics (SVG).

D3 supports many different kinds of input data formats. Then, using its powerful built-in methods, you can transform those data into different charts, graphs, and maps.
-----
METHODS to add, change elements in Documents:
-----
*const ul = d3.select("a"); === selects one element for doc as argument and returns HTML node for first match
*const anchors = d3.selectAll("a"); === returns an array of HTML nodes for all the items in the document that match the input string.

---METHODS can be chained:---
d3.select("ul")
*  .append("li")	=== appends an HTML node to a selected item, and returns a handle to that node.
*  .text("Very important item"); === either sets the text of the selected node, or gets the current text.

---create new elements---
const dataset = ["a", "b", "c"];
    d3.select("ul").selectAll("li")
*     .data(dataset)	=== used on a selection of DOM elements to attach the data to those elements.
*     .enter()
      .append("li")
      .text("New item");
When enter() is combined with the data() method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.
It's important to note that you do NOT need to write a for loop or use forEach() to iterate over the items in the data set. data() method parses the data set, and any method that's chained after data() is run once for each item in the data set.

---update/modify existing elements using callback in .text()---
const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];
    d3.select("body").selectAll("h2")
    .data(dataset)
    .enter()
    .append("h2")
	.text((d)=> d + ' USD')

---style elements---
*{selection}.style("color","blue");
can use callback to modify style based on data or a condition ---> selection.style('color',(d)=> d < 20 ? 'red' : 'green');

---add attributes---
*selection.attr("class", "container");

---eg create bar chart---
    .bar {
    width: 25px;
    height: 100px;
    display: inline-block;
    background-color: blue;
  }
	const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      .attr("class", "bar")
	  .style('height', (d)=> d + "px")

--------------------SVG in D3--------------------
SVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML <svg> tag.

When you place a shape into the svg area, you can specify where it goes with x and y coordinates. The origin point of (0, 0) is in the upper-left corner. Positive values for x push the shape to the right, and positive values for y push the shape down from the origin point.
eg. An SVG <rect> has four attributes. There are the x and y coordinates for where it is placed in the svg area. It also has a height and width to specify the size.
eg. A <circle> in SVG has three main attributes. The cx and cy attributes are the coordinates. They tell D3 where to position the center of the shape on the SVG. The radius (r attribute) gives the size of the circle.  

---Linear Scale---
In D3, there are scales to help plot data. scales are functions that tell the program how to map a set of raw data points onto the pixels of the SVG.
It's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the x and y values fit your SVG width and height.

D3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method scaleLinear():

const scale = d3.scaleLinear()
By default, a scale uses the identity relationship. This means the input value maps to the output value. 
However, scales can be much more flexible and interesting. 
Say a dataset has values ranging from 50 to 480. This is the input information for a scale, also known as the DOMAIN.
You want to map those points along the x axis on the SVG, between 10 units and 500 units. This is the output information, also known as the RANGE.
The domain() and range() methods set these values for the scale. Both methods take an array of at least two elements as an argument.
eg.
const scale = d3.scaleLinear();
scale.domain([250, 500]);
scale.range([10, 150]);
    const output = scale(50);
    d3.select("body")
      .append("h2")
      .text(output);
Often when you set the domain, you'll want to use the minimum and maximum values within the data set. Trying to find these values manually, especially in a large data set, may cause errors.

D3 has two methods - min() and max() to return this information 
const exampleData = [34, 234, 73, 90, 6, 52];
d3.min(exampleData)
d3.max(exampleData)
A dataset may have nested arrays, like the [x, y] coordinate pairs that were in the scatter plot example. In that case, you need to tell D3 how to calculate the maximum and minimum. Both the min() and max() methods take a callback function. 
eg.
const locationData = [[1, 7],[6, 3],[8, 3]];
const minX = d3.min(locationData, (d) => d[0]);

Given a complex data set, one priority is to set the scale so the visualization fits the SVG container's width and height. You want all the data plotted inside the SVG so it's visible on the web page.
Another way to improve the scatter plot is to add an x-axis and a y-axis.
D3 has two methods, axisLeft() and axisBottom(), to render the y-axis and x-axis, respectively
SVG supports different types of transforms, but positioning an axis needs translate - apply a transform attribute to position the axis on the SVG in the right place. Otherwise, the line would render along the border of the SVG and wouldn't be visible.
The example below sets the x-axis scale for scatter plot data. The domain() method passes information to the scale about the raw data values for the plot. The range() method gives it information about the actual space on the web page for the visualization.
const dataset = [
  [ 34,    78 ],
  [ 109,   280 ],
  [ 310,   120 ],
  [ 79,    411 ],
  [ 420,   220 ],
  [ 233,   145 ],
  [ 333,   96 ],
  [ 222,   333 ],
  [ 78,    320 ],
  [ 21,    123 ]
];
const w = 500;
const h = 500;

const padding = 30;
const xScale = d3.scaleLinear()
  .domain([0, d3.max(dataset, (d) => d[0])])
  .range([padding, w - padding]);
const yScale = d3.scaleLinear()
	.domain([0, d3.max(dataset, (d) => d[1])])
	.range([h - padding, padding]);

const svg = d3.select("body")
	.append("svg")
	.attr("width", w)
	.attr("height", h);
svg.selectAll("circle")
	.data(dataset)
	.enter()
	.append("circle")
	.attr("x", (d) => xScale(d[0]))
	.attr("y", (d) => yScale(d[1]))
	.attr("cx", (d) => xScale(d[0]))
	.attr("cy", (d) => yScale(d[1]))
	.attr('r', '5')
svg.selectAll("text")
	.data(dataset)
	.enter()
	.append("text")
	.text((d) =>  (d[0] + ", " + d[1]))
 	.attr("x", (d) => xScale(d[0] + 10))
	.attr("y", (d) => yScale(d[1]))
const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale);

svg.append("g")
	.attr("transform", "translate(0," + (h - padding) + ")")
	.call(xAxis);
svg.append('g')
	.attr('transform', "translate(60,0)")
	.call(yAxis);


------------------JSON APIs and AJAX-----------------------
JSON transmitted by APIs are sent as bytes, and your application receives it as a string. 
These can be converted into JavaScript objects, but they are not JavaScript objects by default. 
The JSON.parse() method parses the string and constructs the JavaScript object described by it.
JSON.stringify() method converts the JavaScript object into a string.
example:
const req = new XMLHttpRequest();
req.open("GET",'/json/cats.json',true);			-->initializes a request (true = asynchronous request)
req.send();
req.onload = function(){
  const json = JSON.parse(req.responseText);
  document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
};
example using fetch():
fetch('/json/cats.json')
  .then(response => response.json())			-->takes the response and converts it to JSON format.
  .then(data => {
    document.getElementById('message').innerHTML = JSON.stringify(data);
  })




